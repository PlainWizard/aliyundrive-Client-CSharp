<Application x:Class="aliyundrive_Client_CSharp.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:aliyundrive_Client_CSharp"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <Style TargetType="Button">
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="Width" Value="80"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Padding" Value="5 2 5 2"/>
            <Setter Property="Margin" Value="2"/>
            <Setter Property="Background" Value="#fafbfc"/>
            <Setter Property="BorderBrush" Value="#ccd9e7"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontWeight" Value="Light"/>
            <Style.Resources>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="CornerRadius" Value="8"/>
                </Style>
            </Style.Resources>
        </Style>
        <Style x:Key="circleButton" TargetType="Button" BasedOn="{StaticResource {x:Type Button}}">
            <!--一个圆形的按钮,宽度弧度等于Button的高度-->
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Width" Value="{Binding Height}"/>
            <!--绑定Button的高-->
            <Style.Resources>
                <Style TargetType="{x:Type Border}">
                    <Setter Property="CornerRadius" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Button}},Path=Height}"/>
                    <!--绑定Button的高-->
                </Style>
            </Style.Resources>
        </Style>
        <Style  TargetType="{x:Type DataGridCell}">
            <Style.Triggers>
                <Trigger  Property="IsSelected" Value="true">
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                </Trigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True" />
                        <Condition Binding="{Binding IsKeyboardFocusWithin, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}, Mode=FindAncestor}}" Value="False" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}" />
                    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
                </MultiDataTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="CheckListBoxItemContainerStyle"
       TargetType="{x:Type ListBoxItem}">
            <!--Set it un-focusable, becaues the CheckBox in it should be focusable and only it.-->
            <Setter Property="Focusable" Value="False"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ListBoxItem}">
                        <CheckBox Content="{TemplateBinding Content}"
              ContentTemplate="{TemplateBinding ContentTemplate}"
              ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
              IsChecked="{Binding IsSelected, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <Style x:Key="DataItemCheckListBoxStyle"
       TargetType="{x:Type ListBox}"
       BasedOn="{StaticResource {x:Type ListBox}}">
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <TextBlock Text="{Binding Name}"/>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemContainerStyle">
                <Setter.Value>
                    <Style TargetType="{x:Type ListBoxItem}"
             BasedOn="{StaticResource CheckListBoxItemContainerStyle}">
                        <Setter Property="IsSelected"
                Value="{Binding IsEnabled}"/>
                        <Setter Property="Margin" Value="2,2,0,0"/>
                    </Style>
                </Setter.Value>
            </Setter>
            <Setter Property="SelectionMode" Value="Multiple"/>
        </Style>
    </Application.Resources>
</Application>
